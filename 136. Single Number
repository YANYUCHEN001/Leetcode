"""
刷题的顺序是刷hash表类简单到难的，
当然过程中，不仅使用hash表，也有其他解法。
>这题学到的新知识是疑惑运算
"""
"""
解题思路一：用很传统的解法，两层嵌套。第一层嵌套，遍历数组。第二层嵌套，每一个数都添加到一个空列表中，如果再新加进来的数在这个列表中，也就是说和上一个
数一样，则移除这个数。一进一出，列表实则为空。
如果新加进来的和它不一样，则将其添加和列表。实际上到最后执行完，列表里面只剩一个元素。这个元素就是需要找的。
举例：【1,2,2,3,4,3,4】 循环步骤：【1】--【1,2】--【1】--【1,3】--【1,3,4】--【1,4】--【1】---最后找出【1】这种循环时间复杂度是n平方。
"""
def singlenumber(nums):
    no_duplicate_list=[]
    for i in nums:
        if i not in no_duplicate_list:
            no_duplicate_list.append(i)
        else:
            no_duplicate_list.remove(i)
    return no_duplicate_list.pop()

nums=[1,2,2,3,4,3,4]
x=singlenumber(nums)
print(x)

"""
解题思路二：就是采用异或运算。异或运算就是A相同时候为1，不同时候可以使用交换律。有几个值得参考的公式：
	* 0^a = a;
  (a^b)^b=a(交换运算)
	* a^a = 0;
	* a^b^c = a^c^b;
"""
def singlenumber(nums):
    a=0
    for i in nums:
        a=a^i
    return a                  #0^5^2^2^3^4^3^4=5^2^2^3^4^3^4=5^0^3^4^3^4=5^3^4^3^4=5^3^4^3^4=5  只有一次循环，时间复杂度是o（n）
nums=[5,2,2,3,4,3,4,]
x=singlenumber(nums)
print(x)      
 
"""
解题思路三：采用hash表。也是想通过这个题目最想巩固的知识。hash表建立字典，然后通过try，except语句来寻找异值。popitem（）用法，就是随机删除一对
减值并且返回。popitem（）【0】是返回键
具体是先建立一个空字典，然后一次遍历，将数组里面元素全部读取。再通过将读取的元素通过try语句，如果元素在字典里面，则删除该元素，如果不在则当成
错误处理，将元素加入到字典里面。最后字典里面只有一个元素。再通过popitem将值读取出来。
“””
def singlenumber(nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        hash_table = {}       #时间复杂度o（n）
        for i in nums:
            try:            #{}--------{5:'a'}-----{5:'a',2:'a'}----{5:'a'}----{5:'a',3:'a'}----{5;'a',3:'a',4:'a'}----{5:'a'}
                hash_table.pop(i)
            except:
                hash_table[i] = 'a'
        return hash_table.popitem()[0]   #read the first value---key 

nums=[5,2,2,3,4,3,4,]
x=singlenumber(nums)
print(x)



#总结：三种思路三种方法。好好巩固异或运算和hash表与try，except结合的操作。







